// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metadata/frontgate/frontgate.proto

/*
Package pbfrontgate is a generated protocol buffer package.

It is generated from these files:
	metadata/frontgate/frontgate.proto

It has these top-level messages:
	Config
*/
package pbfrontgate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import metadata_types "openpitrix.io/metadata/pkg/pb/types"
import metadata_types1 "openpitrix.io/metadata/pkg/pb/types"
import metadata_types2 "openpitrix.io/metadata/pkg/pb/types"
import metadata_types3 "openpitrix.io/metadata/pkg/pb/types"
import metadata_types4 "openpitrix.io/metadata/pkg/pb/types"
import metadata_types5 "openpitrix.io/metadata/pkg/pb/types"
import metadata_types6 "openpitrix.io/metadata/pkg/pb/types"

import "bufio"
import "crypto/tls"
import "errors"
import "io"
import "log"
import "net"
import "net/http"
import "net/rpc"
import "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Id          string                             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ListenPort  int32                              `protobuf:"varint,2,opt,name=listen_port,json=listenPort" json:"listen_port,omitempty"`
	PilotHost   string                             `protobuf:"bytes,3,opt,name=pilot_host,json=pilotHost" json:"pilot_host,omitempty"`
	PilotPort   int32                              `protobuf:"varint,4,opt,name=pilot_port,json=pilotPort" json:"pilot_port,omitempty"`
	NodeList    *metadata_types4.FrontgateEndpoint `protobuf:"bytes,5,opt,name=node_list,json=nodeList" json:"node_list,omitempty"`
	EtcdConfig  *metadata_types1.EtcdConfig        `protobuf:"bytes,6,opt,name=etcd_config,json=etcdConfig" json:"etcd_config,omitempty"`
	ConfdConfig *metadata_types2.ConfdConfig       `protobuf:"bytes,7,opt,name=confd_config,json=confdConfig" json:"confd_config,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Config) GetListenPort() int32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *Config) GetPilotHost() string {
	if m != nil {
		return m.PilotHost
	}
	return ""
}

func (m *Config) GetPilotPort() int32 {
	if m != nil {
		return m.PilotPort
	}
	return 0
}

func (m *Config) GetNodeList() *metadata_types4.FrontgateEndpoint {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *Config) GetEtcdConfig() *metadata_types1.EtcdConfig {
	if m != nil {
		return m.EtcdConfig
	}
	return nil
}

func (m *Config) GetConfdConfig() *metadata_types2.ConfdConfig {
	if m != nil {
		return m.ConfdConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "metadata.frontgate.Config")
}

type FrontgateService interface {
	GetPilotVersion(in *metadata_types.Empty, out *metadata_types.Version) error
	GetFrontgateVersion(in *metadata_types.Empty, out *metadata_types.Version) error
	GetDroneVersion(in *metadata_types3.DroneEndpoint, out *metadata_types.Version) error
	GetPilotConfig(in *metadata_types.Empty, out *metadata_types5.PilotConfig) error
	GetFrontgateConfig(in *metadata_types.Empty, out *metadata_types4.FrontgateConfig) error
	SetFrontgateConfig(in *metadata_types4.FrontgateConfig, out *metadata_types.Empty) error
	SetFrontgateNodeConfig(in *metadata_types4.FrontgateConfig, out *metadata_types.Empty) error
	GetDroneList(in *metadata_types.Empty, out *metadata_types3.DroneIdList) error
	GetDroneConfig(in *metadata_types3.DroneEndpoint, out *metadata_types3.DroneConfig) error
	SetDroneConfig(in *metadata_types3.SetDroneConfigRequest, out *metadata_types.Empty) error
	GetConfdConfig(in *metadata_types2.ConfdEndpoint, out *metadata_types2.ConfdConfig) error
	IsConfdRunning(in *metadata_types2.ConfdEndpoint, out *metadata_types.Bool) error
	StartConfd(in *metadata_types2.ConfdEndpoint, out *metadata_types.Empty) error
	StopConfd(in *metadata_types2.ConfdEndpoint, out *metadata_types.Empty) error
	RegisterMetadata(in *metadata_types6.SubTask_RegisterMetadata, out *metadata_types.Empty) error
	DeregisterMetadata(in *metadata_types6.SubTask_DeregisterMetadata, out *metadata_types.Empty) error
	RegisterMetadataMapping(in *metadata_types6.SubTask_RegisterMetadata, out *metadata_types.Empty) error
	DeregisterMetadataMapping(in *metadata_types6.SubTask_DeregisterMetadata, out *metadata_types.Empty) error
	RegisterCmd(in *metadata_types6.SubTask_RegisterCmd, out *metadata_types.Empty) error
	DeregisterCmd(in *metadata_types6.SubTask_DeregisterCmd, out *metadata_types.Empty) error
	ReportSubTaskStatus(in *metadata_types6.SubTaskStatus, out *metadata_types.Empty) error
	GetEtcdValuesByPrefix(in *metadata_types.String, out *metadata_types.StringMap) error
	GetEtcdValues(in *metadata_types.StringList, out *metadata_types.StringMap) error
	SetEtcdValues(in *metadata_types.StringMap, out *metadata_types.Empty) error
	PingPilot(in *metadata_types.Empty, out *metadata_types.Empty) error
	PingFrontgate(in *metadata_types.Empty, out *metadata_types.Empty) error
	PingFrontgateNode(in *metadata_types.Empty, out *metadata_types.Empty) error
	PingDrone(in *metadata_types3.DroneEndpoint, out *metadata_types.Empty) error
	PingMetadataBackend(in *metadata_types.Empty, out *metadata_types.Empty) error
	RunCommand(in *metadata_types4.RunCommandOnFrontgateRequest, out *metadata_types.String) error
	RunCommandOnDrone(in *metadata_types3.RunCommandOnDroneRequest, out *metadata_types.String) error
	HeartBeat(in *metadata_types.Empty, out *metadata_types.Empty) error
}

// AcceptFrontgateServiceClient accepts connections on the listener and serves requests
// for each incoming connection.  Accept blocks; the caller typically
// invokes it in a go statement.
func AcceptFrontgateServiceClient(lis net.Listener, x FrontgateService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("metadata.frontgate.FrontgateService", x); err != nil {
		log.Fatal(err)
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// RegisterFrontgateService publish the given FrontgateService implementation on the server.
func RegisterFrontgateService(srv *rpc.Server, x FrontgateService) error {
	if err := srv.RegisterName("metadata.frontgate.FrontgateService", x); err != nil {
		return err
	}
	return nil
}

// NewFrontgateServiceServer returns a new FrontgateService Server.
func NewFrontgateServiceServer(x FrontgateService) *rpc.Server {
	srv := rpc.NewServer()
	if err := srv.RegisterName("metadata.frontgate.FrontgateService", x); err != nil {
		log.Fatal(err)
	}
	return srv
}

// ListenAndServeFrontgateService listen announces on the local network address laddr
// and serves the given FrontgateService implementation.
func ListenAndServeFrontgateService(network, addr string, x FrontgateService) error {
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	defer lis.Close()

	srv := rpc.NewServer()
	if err := srv.RegisterName("metadata.frontgate.FrontgateService", x); err != nil {
		return err
	}

	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("lis.Accept(): %v\n", err)
		}
		go srv.ServeConn(conn)
	}
}

// ServeFrontgateService serves the given FrontgateService implementation.
func ServeFrontgateService(conn io.ReadWriteCloser, x FrontgateService) {
	srv := rpc.NewServer()
	if err := srv.RegisterName("metadata.frontgate.FrontgateService", x); err != nil {
		log.Fatal(err)
	}
	srv.ServeConn(conn)
}

type FrontgateServiceClient struct {
	*rpc.Client
}

// NewFrontgateServiceClient returns a FrontgateService stub to handle
// requests to the set of FrontgateService at the other end of the connection.
func NewFrontgateServiceClient(conn io.ReadWriteCloser) *FrontgateServiceClient {
	c := rpc.NewClient(conn)
	return &FrontgateServiceClient{c}
}

func (c *FrontgateServiceClient) GetPilotVersion(in *metadata_types.Empty) (out *metadata_types.Version, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Version)
	if err = c.Call("metadata.frontgate.FrontgateService.GetPilotVersion", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetPilotVersion(in *metadata_types.Empty, out *metadata_types.Version, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetPilotVersion",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetFrontgateVersion(in *metadata_types.Empty) (out *metadata_types.Version, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Version)
	if err = c.Call("metadata.frontgate.FrontgateService.GetFrontgateVersion", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetFrontgateVersion(in *metadata_types.Empty, out *metadata_types.Version, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetFrontgateVersion",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetDroneVersion(in *metadata_types3.DroneEndpoint) (out *metadata_types.Version, err error) {
	if in == nil {
		in = new(metadata_types3.DroneEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Version)
	if err = c.Call("metadata.frontgate.FrontgateService.GetDroneVersion", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetDroneVersion(in *metadata_types3.DroneEndpoint, out *metadata_types.Version, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types3.DroneEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetDroneVersion",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetPilotConfig(in *metadata_types.Empty) (out *metadata_types5.PilotConfig, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types5.PilotConfig)
	if err = c.Call("metadata.frontgate.FrontgateService.GetPilotConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetPilotConfig(in *metadata_types.Empty, out *metadata_types5.PilotConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetPilotConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetFrontgateConfig(in *metadata_types.Empty) (out *metadata_types4.FrontgateConfig, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types4.FrontgateConfig)
	if err = c.Call("metadata.frontgate.FrontgateService.GetFrontgateConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetFrontgateConfig(in *metadata_types.Empty, out *metadata_types4.FrontgateConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetFrontgateConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) SetFrontgateConfig(in *metadata_types4.FrontgateConfig) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types4.FrontgateConfig)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.SetFrontgateConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncSetFrontgateConfig(in *metadata_types4.FrontgateConfig, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types4.FrontgateConfig)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.SetFrontgateConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) SetFrontgateNodeConfig(in *metadata_types4.FrontgateConfig) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types4.FrontgateConfig)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.SetFrontgateNodeConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncSetFrontgateNodeConfig(in *metadata_types4.FrontgateConfig, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types4.FrontgateConfig)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.SetFrontgateNodeConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetDroneList(in *metadata_types.Empty) (out *metadata_types3.DroneIdList, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types3.DroneIdList)
	if err = c.Call("metadata.frontgate.FrontgateService.GetDroneList", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetDroneList(in *metadata_types.Empty, out *metadata_types3.DroneIdList, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetDroneList",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetDroneConfig(in *metadata_types3.DroneEndpoint) (out *metadata_types3.DroneConfig, err error) {
	if in == nil {
		in = new(metadata_types3.DroneEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types3.DroneConfig)
	if err = c.Call("metadata.frontgate.FrontgateService.GetDroneConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetDroneConfig(in *metadata_types3.DroneEndpoint, out *metadata_types3.DroneConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types3.DroneEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetDroneConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) SetDroneConfig(in *metadata_types3.SetDroneConfigRequest) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types3.SetDroneConfigRequest)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.SetDroneConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncSetDroneConfig(in *metadata_types3.SetDroneConfigRequest, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types3.SetDroneConfigRequest)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.SetDroneConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetConfdConfig(in *metadata_types2.ConfdEndpoint) (out *metadata_types2.ConfdConfig, err error) {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types2.ConfdConfig)
	if err = c.Call("metadata.frontgate.FrontgateService.GetConfdConfig", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetConfdConfig(in *metadata_types2.ConfdEndpoint, out *metadata_types2.ConfdConfig, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetConfdConfig",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) IsConfdRunning(in *metadata_types2.ConfdEndpoint) (out *metadata_types.Bool, err error) {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Bool)
	if err = c.Call("metadata.frontgate.FrontgateService.IsConfdRunning", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncIsConfdRunning(in *metadata_types2.ConfdEndpoint, out *metadata_types.Bool, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.IsConfdRunning",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) StartConfd(in *metadata_types2.ConfdEndpoint) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.StartConfd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncStartConfd(in *metadata_types2.ConfdEndpoint, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.StartConfd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) StopConfd(in *metadata_types2.ConfdEndpoint) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.StopConfd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncStopConfd(in *metadata_types2.ConfdEndpoint, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types2.ConfdEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.StopConfd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RegisterMetadata(in *metadata_types6.SubTask_RegisterMetadata) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTask_RegisterMetadata)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.RegisterMetadata", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRegisterMetadata(in *metadata_types6.SubTask_RegisterMetadata, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTask_RegisterMetadata)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.RegisterMetadata",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) DeregisterMetadata(in *metadata_types6.SubTask_DeregisterMetadata) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTask_DeregisterMetadata)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.DeregisterMetadata", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncDeregisterMetadata(in *metadata_types6.SubTask_DeregisterMetadata, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTask_DeregisterMetadata)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.DeregisterMetadata",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RegisterMetadataMapping(in *metadata_types6.SubTask_RegisterMetadata) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTask_RegisterMetadata)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.RegisterMetadataMapping", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRegisterMetadataMapping(in *metadata_types6.SubTask_RegisterMetadata, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTask_RegisterMetadata)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.RegisterMetadataMapping",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) DeregisterMetadataMapping(in *metadata_types6.SubTask_DeregisterMetadata) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTask_DeregisterMetadata)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.DeregisterMetadataMapping", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncDeregisterMetadataMapping(in *metadata_types6.SubTask_DeregisterMetadata, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTask_DeregisterMetadata)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.DeregisterMetadataMapping",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RegisterCmd(in *metadata_types6.SubTask_RegisterCmd) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTask_RegisterCmd)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.RegisterCmd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRegisterCmd(in *metadata_types6.SubTask_RegisterCmd, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTask_RegisterCmd)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.RegisterCmd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) DeregisterCmd(in *metadata_types6.SubTask_DeregisterCmd) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTask_DeregisterCmd)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.DeregisterCmd", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncDeregisterCmd(in *metadata_types6.SubTask_DeregisterCmd, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTask_DeregisterCmd)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.DeregisterCmd",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) ReportSubTaskStatus(in *metadata_types6.SubTaskStatus) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types6.SubTaskStatus)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.ReportSubTaskStatus", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncReportSubTaskStatus(in *metadata_types6.SubTaskStatus, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types6.SubTaskStatus)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.ReportSubTaskStatus",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetEtcdValuesByPrefix(in *metadata_types.String) (out *metadata_types.StringMap, err error) {
	if in == nil {
		in = new(metadata_types.String)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.StringMap)
	if err = c.Call("metadata.frontgate.FrontgateService.GetEtcdValuesByPrefix", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetEtcdValuesByPrefix(in *metadata_types.String, out *metadata_types.StringMap, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.String)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetEtcdValuesByPrefix",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) GetEtcdValues(in *metadata_types.StringList) (out *metadata_types.StringMap, err error) {
	if in == nil {
		in = new(metadata_types.StringList)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.StringMap)
	if err = c.Call("metadata.frontgate.FrontgateService.GetEtcdValues", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncGetEtcdValues(in *metadata_types.StringList, out *metadata_types.StringMap, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.StringList)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.GetEtcdValues",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) SetEtcdValues(in *metadata_types.StringMap) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types.StringMap)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.SetEtcdValues", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncSetEtcdValues(in *metadata_types.StringMap, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.StringMap)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.SetEtcdValues",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingPilot(in *metadata_types.Empty) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.PingPilot", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingPilot(in *metadata_types.Empty, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.PingPilot",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingFrontgate(in *metadata_types.Empty) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.PingFrontgate", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingFrontgate(in *metadata_types.Empty, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.PingFrontgate",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingFrontgateNode(in *metadata_types.Empty) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.PingFrontgateNode", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingFrontgateNode(in *metadata_types.Empty, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.PingFrontgateNode",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingDrone(in *metadata_types3.DroneEndpoint) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types3.DroneEndpoint)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.PingDrone", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingDrone(in *metadata_types3.DroneEndpoint, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types3.DroneEndpoint)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.PingDrone",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) PingMetadataBackend(in *metadata_types.Empty) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.PingMetadataBackend", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncPingMetadataBackend(in *metadata_types.Empty, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.PingMetadataBackend",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RunCommand(in *metadata_types4.RunCommandOnFrontgateRequest) (out *metadata_types.String, err error) {
	if in == nil {
		in = new(metadata_types4.RunCommandOnFrontgateRequest)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.String)
	if err = c.Call("metadata.frontgate.FrontgateService.RunCommand", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRunCommand(in *metadata_types4.RunCommandOnFrontgateRequest, out *metadata_types.String, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types4.RunCommandOnFrontgateRequest)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.RunCommand",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) RunCommandOnDrone(in *metadata_types3.RunCommandOnDroneRequest) (out *metadata_types.String, err error) {
	if in == nil {
		in = new(metadata_types3.RunCommandOnDroneRequest)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.String)
	if err = c.Call("metadata.frontgate.FrontgateService.RunCommandOnDrone", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncRunCommandOnDrone(in *metadata_types3.RunCommandOnDroneRequest, out *metadata_types.String, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types3.RunCommandOnDroneRequest)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.RunCommandOnDrone",
		in, out,
		done,
	)
}

func (c *FrontgateServiceClient) HeartBeat(in *metadata_types.Empty) (out *metadata_types.Empty, err error) {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	type Validator interface {
		Validate() error
	}
	if x, ok := proto.Message(in).(Validator); ok {
		if err := x.Validate(); err != nil {
			return nil, err
		}
	}
	out = new(metadata_types.Empty)
	if err = c.Call("metadata.frontgate.FrontgateService.HeartBeat", in, out); err != nil {
		return nil, err
	}
	if x, ok := proto.Message(out).(Validator); ok {
		if err := x.Validate(); err != nil {
			return out, err
		}
	}
	return out, nil
}

func (c *FrontgateServiceClient) AsyncHeartBeat(in *metadata_types.Empty, out *metadata_types.Empty, done chan *rpc.Call) *rpc.Call {
	if in == nil {
		in = new(metadata_types.Empty)
	}
	return c.Go(
		"metadata.frontgate.FrontgateService.HeartBeat",
		in, out,
		done,
	)
}

// DialFrontgateService connects to an FrontgateService at the specified network address.
func DialFrontgateService(network, addr string) (*FrontgateServiceClient, error) {
	c, err := rpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceClient{c}, nil
}

// DialFrontgateServiceTimeout connects to an FrontgateService at the specified network address.
func DialFrontgateServiceTimeout(network, addr string, timeout time.Duration) (*FrontgateServiceClient, error) {
	conn, err := net.DialTimeout(network, addr, timeout)
	if err != nil {
		return nil, err
	}
	return &FrontgateServiceClient{rpc.NewClient(conn)}, nil
}

// DialFrontgateServiceHTTP connects to an HTTP RPC server at the specified network address
// listening on the default HTTP RPC path.
func DialFrontgateServiceHTTP(network, address string) (*FrontgateServiceClient, error) {
	return DialFrontgateServiceHTTPPath(network, address, rpc.DefaultRPCPath)
}

// DialFrontgateServiceHTTPPath connects to an HTTP RPC server
// at the specified network address and path.
func DialFrontgateServiceHTTPPath(network, address, path string) (*FrontgateServiceClient, error) {
	conn, err := net.Dial(network, address)
	if err != nil {
		return nil, err
	}
	return dialFrontgateServicePath(network, address, path, conn)
}

// DialFrontgateServiceHTTPS connects to an HTTPS RPC server at the specified network address
// listening on the default HTTP RPC path.
func DialFrontgateServiceHTTPS(network, address string, tlsConfig *tls.Config) (*FrontgateServiceClient, error) {
	return DialFrontgateServiceHTTPSPath(network, address, rpc.DefaultRPCPath, tlsConfig)
}

// DialFrontgateServiceHTTPSPath connects to an HTTPS RPC server
// at the specified network address and path.
func DialFrontgateServiceHTTPSPath(network, address, path string, tlsConfig *tls.Config) (*FrontgateServiceClient, error) {
	conn, err := tls.Dial(network, address, tlsConfig)
	if err != nil {
		return nil, err
	}
	return dialFrontgateServicePath(network, address, path, conn)
}

func dialFrontgateServicePath(network, address, path string, conn net.Conn) (*FrontgateServiceClient, error) {
	const net_rpc_connected = "200 Connected to Go RPC"

	io.WriteString(conn, "CONNECT "+path+" HTTP/1.0\n\n")

	// Require successful HTTP response
	// before switching to RPC protocol.
	resp, err := http.ReadResponse(bufio.NewReader(conn), &http.Request{Method: "CONNECT"})
	if err == nil && resp.Status == net_rpc_connected {
		return &FrontgateServiceClient{rpc.NewClient(conn)}, nil
	}
	if err == nil {
		err = errors.New("unexpected HTTP response: " + resp.Status)
	}
	conn.Close()
	return nil, &net.OpError{
		Op:   "dial-http",
		Net:  network + " " + address,
		Addr: nil,
		Err:  err,
	}
}

func init() { proto.RegisterFile("metadata/frontgate/frontgate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x61, 0x4f, 0x1a, 0x49,
	0x18, 0xc7, 0x03, 0x77, 0x7a, 0xc7, 0x83, 0x70, 0x3a, 0x9e, 0x8a, 0x7b, 0xf1, 0xf4, 0xbc, 0x98,
	0x90, 0xcb, 0x05, 0x13, 0x4d, 0x5f, 0x18, 0x53, 0x13, 0x40, 0x54, 0x5a, 0xb1, 0x64, 0xb7, 0xb5,
	0x89, 0x2f, 0x4a, 0x16, 0x76, 0xa0, 0x13, 0x60, 0x66, 0xba, 0x3b, 0x34, 0xfa, 0xbd, 0xfa, 0xb1,
	0xfa, 0x21, 0x9a, 0x99, 0x65, 0x17, 0xd8, 0x65, 0xd8, 0x52, 0xfb, 0xc6, 0xac, 0xf3, 0x7f, 0xfe,
	0xbf, 0xfd, 0x3f, 0xcf, 0x0e, 0xb3, 0x0b, 0x87, 0x43, 0x2c, 0x6c, 0xc7, 0x16, 0xf6, 0x71, 0xd7,
	0x65, 0x54, 0xf4, 0x6c, 0x81, 0x27, 0x57, 0x25, 0xee, 0x32, 0xc1, 0x10, 0x0a, 0x6a, 0x4a, 0xa1,
	0x62, 0x18, 0xa1, 0x4f, 0x3c, 0x71, 0xec, 0xf9, 0x7f, 0xfd, 0x7a, 0x63, 0x37, 0xa2, 0x61, 0xd1,
	0x71, 0xc6, 0x52, 0xd4, 0xd6, 0x61, 0xb4, 0xab, 0xd3, 0x1c, 0x97, 0xd1, 0x71, 0x04, 0xe3, 0xef,
	0x88, 0x16, 0x89, 0x18, 0xf3, 0x72, 0x32, 0x60, 0x42, 0x13, 0x47, 0xd8, 0x5e, 0xdf, 0x97, 0x0e,
	0xbf, 0xa4, 0x61, 0xb5, 0xca, 0x68, 0x97, 0xf4, 0x50, 0x1e, 0xd2, 0xc4, 0x29, 0xa4, 0x0e, 0x52,
	0xc5, 0x8c, 0x99, 0x26, 0x0e, 0xda, 0x87, 0xec, 0x80, 0x78, 0x02, 0xd3, 0x16, 0x67, 0xae, 0x28,
	0xa4, 0x0f, 0x52, 0xc5, 0x15, 0x13, 0xfc, 0xa5, 0x26, 0x73, 0x05, 0xda, 0x03, 0x50, 0x77, 0x69,
	0x7d, 0x64, 0x9e, 0x28, 0xfc, 0xa2, 0x8c, 0x19, 0xb5, 0x72, 0xc3, 0xbc, 0x29, 0x59, 0xd9, 0x7f,
	0x55, 0x76, 0x5f, 0x56, 0xee, 0x0b, 0xc8, 0x50, 0xe6, 0xe0, 0x96, 0x04, 0x16, 0x56, 0x0e, 0x52,
	0xc5, 0xec, 0xc9, 0x3f, 0xa5, 0x70, 0xce, 0xfe, 0x34, 0xaf, 0x82, 0x26, 0x6b, 0xd4, 0xe1, 0x8c,
	0x50, 0x61, 0xfe, 0x2e, 0x3d, 0xb7, 0xc4, 0x13, 0xe8, 0x1c, 0xb2, 0x72, 0xac, 0xad, 0x8e, 0x4a,
	0x5f, 0x58, 0x55, 0x04, 0x23, 0x4a, 0xa8, 0x89, 0x8e, 0xe3, 0xf7, 0x67, 0x02, 0x0e, 0xaf, 0xd1,
	0x05, 0xac, 0xa9, 0xc1, 0x07, 0xee, 0xdf, 0x94, 0xfb, 0xaf, 0xa8, 0x5b, 0x56, 0x07, 0xf6, 0x6c,
	0x67, 0xf2, 0xcf, 0xc9, 0x57, 0x04, 0xeb, 0x61, 0x38, 0x0b, 0xbb, 0x9f, 0x49, 0x07, 0xa3, 0x32,
	0xfc, 0x71, 0x8d, 0x45, 0x53, 0x76, 0x78, 0x8f, 0x5d, 0x8f, 0x30, 0x8a, 0xb6, 0x62, 0x79, 0x86,
	0x5c, 0x3c, 0x19, 0x3b, 0xd1, 0xe5, 0xa0, 0xbe, 0x06, 0x9b, 0xd7, 0x58, 0x84, 0xe4, 0x1f, 0xc5,
	0xd4, 0x55, 0x92, 0x4b, 0xb9, 0x7d, 0x82, 0xa5, 0xbd, 0x68, 0xad, 0x52, 0x83, 0xb9, 0xea, 0x51,
	0x97, 0x90, 0x0f, 0x9a, 0x1a, 0xcf, 0x4e, 0x13, 0x26, 0x36, 0xbc, 0x69, 0xcf, 0x2d, 0xa0, 0xe9,
	0xbe, 0x16, 0x93, 0xf6, 0xb5, 0xdb, 0x60, 0x42, 0xb3, 0xe2, 0xb4, 0x24, 0x9b, 0x31, 0xff, 0x76,
	0xa8, 0x09, 0xdb, 0xd3, 0xb4, 0x3b, 0xe6, 0x3c, 0x97, 0x58, 0x81, 0xb5, 0x60, 0xfc, 0x6a, 0xab,
	0x7e, 0xef, 0xc4, 0x94, 0xa3, 0xee, 0x28, 0xcf, 0xad, 0x9a, 0xbb, 0x5a, 0x19, 0xa7, 0x49, 0x78,
	0x82, 0xf3, 0x69, 0x63, 0xef, 0x1d, 0xe4, 0xad, 0x59, 0xda, 0x51, 0xb4, 0x7c, 0x56, 0x37, 0xf1,
	0xa7, 0x11, 0xf6, 0x84, 0xae, 0x43, 0x3f, 0xdd, 0xd4, 0xcf, 0x23, 0x9e, 0x4e, 0x89, 0xfa, 0x74,
	0xd3, 0xde, 0x1a, 0xe4, 0xeb, 0x9e, 0x5a, 0x30, 0x47, 0x94, 0x12, 0x9a, 0x48, 0xfb, 0x33, 0x2a,
	0x57, 0x18, 0x1b, 0xa0, 0x0a, 0x80, 0x25, 0x6c, 0xd7, 0x8f, 0x95, 0x84, 0xd0, 0x34, 0x56, 0x86,
	0x8c, 0x25, 0x18, 0x7f, 0x0e, 0xc2, 0x82, 0x75, 0x13, 0xf7, 0xe4, 0x31, 0xe9, 0x36, 0xc6, 0x3a,
	0x2a, 0xc6, 0xa6, 0x3d, 0x6a, 0xbf, 0xb5, 0xbd, 0x7e, 0x2b, 0x5a, 0xa9, 0x83, 0xbe, 0x07, 0x74,
	0x89, 0xdd, 0x28, 0xf6, 0x3f, 0x1d, 0x36, 0x5e, 0xab, 0x03, 0x3f, 0xc0, 0x4e, 0x34, 0x43, 0xc3,
	0xe6, 0x5c, 0x3e, 0x84, 0x67, 0x87, 0xfe, 0x00, 0xbb, 0xf1, 0x20, 0x01, 0xfd, 0x27, 0x64, 0xaf,
	0x43, 0x36, 0x88, 0x52, 0x1d, 0x3a, 0xe8, 0xdf, 0xa4, 0xbc, 0xd5, 0xa1, 0xa3, 0x43, 0x35, 0x20,
	0x37, 0xb9, 0xaf, 0x84, 0x1d, 0x25, 0xc7, 0x5b, 0x80, 0x7b, 0x0d, 0x9b, 0x26, 0x96, 0xef, 0xbd,
	0xb1, 0xcb, 0x12, 0xb6, 0x18, 0x79, 0xf1, 0x0d, 0x35, 0x23, 0xeb, 0x60, 0xaf, 0x60, 0xeb, 0x1a,
	0x0b, 0xf9, 0x26, 0xbb, 0xb7, 0x07, 0x23, 0xec, 0x55, 0x9e, 0x9a, 0x2e, 0xee, 0x92, 0x47, 0xb4,
	0x1d, 0xc3, 0x09, 0x97, 0xd0, 0x9e, 0xb1, 0x3b, 0x7f, 0xbd, 0x61, 0x73, 0x74, 0x05, 0xb9, 0x19,
	0x16, 0x32, 0xe6, 0xd7, 0xca, 0x33, 0x68, 0x11, 0xa7, 0x0c, 0x39, 0x6b, 0x86, 0xa3, 0xaf, 0xd5,
	0xb5, 0x75, 0x06, 0x99, 0x26, 0xa1, 0x3d, 0xf5, 0x9a, 0xd0, 0x1d, 0x91, 0x1a, 0xeb, 0x4b, 0xc8,
	0x49, 0x6b, 0x78, 0x1c, 0x2f, 0x69, 0x2f, 0xc3, 0xc6, 0x8c, 0x5d, 0x1e, 0xf9, 0x4b, 0x23, 0x54,
	0x78, 0x75, 0x62, 0x26, 0x9d, 0xcc, 0x1a, 0x44, 0x15, 0x36, 0x25, 0x22, 0xd8, 0xe4, 0x15, 0xbb,
	0xd3, 0xc7, 0xd4, 0x59, 0x32, 0x87, 0x09, 0x60, 0x8e, 0x68, 0x95, 0x0d, 0x87, 0x36, 0x75, 0xd0,
	0xff, 0xd1, 0xa2, 0x89, 0xf6, 0x86, 0x86, 0xed, 0x06, 0x67, 0xbb, 0x66, 0xfb, 0xa0, 0x77, 0xb0,
	0x31, 0xed, 0xf3, 0x7b, 0x2c, 0x2e, 0x42, 0xab, 0x92, 0x24, 0xec, 0x19, 0x64, 0x6e, 0xb0, 0xed,
	0x8a, 0x0a, 0xb6, 0x97, 0x7c, 0xde, 0x95, 0x17, 0x0f, 0xa7, 0x8c, 0x63, 0xca, 0x89, 0x70, 0xc9,
	0x63, 0x89, 0xb0, 0xe3, 0xf0, 0x83, 0x96, 0xf7, 0x7b, 0xc7, 0xbc, 0x3d, 0xf9, 0x1a, 0x3e, 0xe7,
	0xed, 0xf0, 0xba, 0xbd, 0xaa, 0xbe, 0x71, 0x4f, 0xbf, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x30,
	0x9b, 0x32, 0xe3, 0x0b, 0x00, 0x00,
}
